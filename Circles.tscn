[gd_scene load_steps=14 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float radius = 0.2;

void fragment(){
	float circle = length(UV - 0.5) - radius;
	vec4 final_color = vec4(vec3(1.0), smoothstep(circle, circle + 0.01, 0.1));
	COLOR = vec4(final_color);
	
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/radius = 0.2

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

float make_circle(vec2 pos, float r){
	return length(pos) - r;
}

void fragment(){
	// you mask a mask which is basically a canvas that you can add a bunch of shapes too
	// notice how with multiple circles they affect each other is you just multiple the masks
	float mask = make_circle(UV - 0.4, 0.2);
	mask *= make_circle(UV - 0.9, 0.06);
	mask *= make_circle(UV - vec2(0.1, 0.9), 0.3);
	
	
	// STEP VS SMOOTHSTEP
	// If you are drawing something smoothstep is almost always better
	//vec4 final_color = vec4(vec3(1.0), step(mask, 0.0));
	
	vec4 final_color = vec4(vec3(1.0), smoothstep(mask, mask + 0.01, 0.0));
	COLOR = vec4(final_color);
	
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

float make_circle(vec2 pos, float r){
	return length(pos) - r;
}

void fragment(){
	// you mask a mask which is basically a canvas that you can add a bunch of shapes too
	// if instead of multiplying we use a min function to add more circles to the mask
	float mask = make_circle(UV - 0.4, 0.2);
	mask = min(mask, make_circle(UV - 0.9, 0.06));
	mask = min(mask, make_circle(UV - vec2(0.1, 0.9), 0.3));
	
	
	// STEP VS SMOOTHSTEP
	// If you are drawing something smoothstep is almost always better
	//vec4 final_color = vec4(vec3(1.0), step(mask, 0.0));
	
	// you can also use a very small change in the smoothstep function to avoid circles messing up others
	// (e.g. change mask + 0.01 to mask + 0.0001)
	vec4 final_color = vec4(vec3(1.0), smoothstep(mask, mask + 0.01, 0.0));
	COLOR = vec4(final_color);
	
}
"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;

float make_circle(vec2 pos, float r){
	return length(pos) - r;
}

void fragment(){
	// you mask a mask which is basically a canvas that you can add a bunch of shapes too
	// if instead of multiplying we use a min function to add more circles to the mask
	
	// Multiple a circle in to remove it
	// If you do make sure you set the smoothstep change to a very small number to not mess up the other circle
	// in ways you don't want
	
	float mask = make_circle(UV - 0.4, 0.2);
	mask *= make_circle(UV - 0.4, 0.06);
	mask = min(mask, make_circle(UV - vec2(0.1, 0.9), 0.3));
	
	
	// STEP VS SMOOTHSTEP
	// If you are drawing something smoothstep is almost always better
//	vec4 final_color = vec4(vec3(1.0), step(mask, 0.0));
	
	vec4 final_color = vec4(vec3(1.0), smoothstep(mask, mask + 0.001, 0.0));
	COLOR = vec4(final_color);
	
}
"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

float make_ring(vec2 pos, float r, float width){
	return abs(length(pos) - r * 0.5) - width;
}

void fragment(){
//	If the width is too large it will make the circle bigger than it should be.
	float mask = make_ring(UV - 0.4, 0.2, 0.05);

	vec4 final_color = vec4(vec3(1.0), smoothstep(mask, mask + 0.01, 0.0));
	COLOR = vec4(final_color);
}

"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;

float make_ellipse(vec2 pos, vec2 r, float scale){
	return length(pos / r) - scale;
}

void fragment(){
	float mask = make_ellipse(UV - 0.4, vec2(0.3, 0.1), 0.5);

	vec4 final_color = vec4(vec3(1.0), smoothstep(mask, mask + 0.01, 0.0));
	COLOR = vec4(final_color);
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )

[node name="Circles" type="Node2D"]
scale = Vector2( 2, 2 )

[node name="SimpleCircle" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 70.0807, 70.8119 )
scale = Vector2( 2, 2 )
texture = ExtResource( 1 )

[node name="CircleWithFunction" type="Sprite" parent="."]
material = SubResource( 4 )
position = Vector2( 208.243, 70.4607 )
scale = Vector2( 2, 2 )
texture = ExtResource( 1 )

[node name="Cleaner Circles" type="Sprite" parent="."]
material = SubResource( 6 )
position = Vector2( 353.091, 66.4925 )
scale = Vector2( 2, 2 )
texture = ExtResource( 1 )

[node name="Remove Circles" type="Sprite" parent="."]
material = SubResource( 8 )
position = Vector2( 499.802, 72.8007 )
scale = Vector2( 2, 2 )
texture = ExtResource( 1 )

[node name="Ring" type="Sprite" parent="."]
material = SubResource( 10 )
position = Vector2( 77.6479, 224.909 )
scale = Vector2( 2, 2 )
texture = ExtResource( 1 )

[node name="Ellipse" type="Sprite" parent="."]
material = SubResource( 12 )
position = Vector2( 210.929, 205.04 )
scale = Vector2( 2, 2 )
texture = ExtResource( 1 )
